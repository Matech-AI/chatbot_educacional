name: Deploy to Hostinger
on:
  push:
    branches: [main]
  workflow_dispatch: # Permite execu√ß√£o manual

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to Hostinger VPS

    steps:
      - name: üöÄ Deploy to Hostinger
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USER }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          port: 22
          script: |
            echo "üöÄ DEPLOY AUTOM√ÅTICO INICIADO - $(date)"
            echo "=========================================="

            # Navegar para o diret√≥rio do projeto
            cd /root/dna-forca-complete

            # Verificar status atual
            echo "üìä Status atual do sistema:"
            ./status.sh

            # Backup n√£o √© necess√°rio - c√≥digo est√° no GitHub
            echo "üíæ Pulando backup (c√≥digo dispon√≠vel no GitHub)"

            # Parar sistema atual
            echo "üõë Parando sistema atual..."
            ./stop_all.sh

            # Aguardar processos terminarem
            sleep 5

            # Fazer pull das mudan√ßas
            echo "üì• Atualizando c√≥digo do GitHub..."
            git fetch origin
            git reset --hard origin/main

            # Verificar se h√° mudan√ßas
            if [ $? -eq 0 ]; then
              echo "‚úÖ C√≥digo atualizado com sucesso!"
            else
              echo "‚ùå Erro ao atualizar c√≥digo!"
              exit 1
            fi

            # Verificar estrutura do projeto
            echo "üîç Verificando estrutura do projeto..."
            if [ -d "src" ]; then
              echo "‚úÖ Frontend (src/) encontrado"
            else
              echo "‚ùå Frontend (src/) n√£o encontrado!"
              exit 1
            fi

            if [ -d "backend" ]; then
              echo "‚úÖ Backend encontrado"
            else
              echo "‚ùå Backend n√£o encontrado!"
              exit 1
            fi

            # Verificar scripts
            if [ -f "start_all.sh" ] && [ -f "stop_all.sh" ] && [ -f "status.sh" ]; then
              echo "‚úÖ Scripts de gerenciamento encontrados"
            else
              echo "‚ùå Scripts de gerenciamento n√£o encontrados!"
              exit 1
            fi

            # Dar permiss√£o de execu√ß√£o aos scripts
            chmod +x *.sh

            # Iniciar sistema
            echo "üöÄ Iniciando sistema atualizado..."
            ./start_all.sh

            # Aguardar inicializa√ß√£o
            echo "‚è≥ Aguardando inicializa√ß√£o dos servi√ßos..."
            sleep 15

            # Verificar status final
            echo "üìä Status final do sistema:"
            ./status.sh

            # Testar endpoints principais com timeout
            echo "üß™ Testando endpoints..."

            # Testar Frontend
            if timeout 10 curl -s http://localhost:3000 > /dev/null; then
              echo "‚úÖ Frontend funcionando (porta 3000)"
            else
              echo "‚ùå Frontend n√£o responde (porta 3000)"
              echo "üîç Verificando logs do frontend..."
              docker logs $(docker ps -q --filter "name=frontend") --tail 20
            fi

            # Testar RAG Server
            if timeout 10 curl -s http://localhost:8001/health > /dev/null; then
              echo "‚úÖ RAG Server funcionando (porta 8001)"
            else
              echo "‚ùå RAG Server n√£o responde (porta 8001)"
              echo "üîç Verificando logs do RAG Server..."
              docker logs $(docker ps -q --filter "name=rag-server") --tail 20
            fi

            # Testar API Server
            if timeout 10 curl -s http://localhost:8002/health > /dev/null; then
              echo "‚úÖ API Server funcionando (porta 8002)"
            else
              echo "‚ùå API Server n√£o responde (porta 8002)"
              echo "üîç Verificando logs do API Server..."
              docker logs $(docker ps -q --filter "name=api-server") --tail 20
            fi

            # Testar Redis
            if timeout 5 docker exec $(docker ps -q --filter "name=redis") redis-cli ping > /dev/null 2>&1; then
              echo "‚úÖ Redis funcionando (porta 6379)"
            else
              echo "‚ùå Redis n√£o responde (porta 6379)"
            fi

            # Verificar se todos os servi√ßos est√£o funcionando
            failed_services=0
            if ! timeout 10 curl -s http://localhost:3000 > /dev/null; then
              failed_services=$((failed_services + 1))
            fi
            if ! timeout 10 curl -s http://localhost:8001/health > /dev/null; then
              failed_services=$((failed_services + 1))
            fi
            if ! timeout 10 curl -s http://localhost:8002/health > /dev/null; then
              failed_services=$((failed_services + 1))
            fi

            if [ $failed_services -gt 0 ]; then
              echo "‚ö†Ô∏è  ATEN√á√ÉO: $failed_services servi√ßo(s) n√£o est√£o respondendo!"
              echo "üîç Verificando logs de todos os servi√ßos..."
              docker ps --format "table {{.Names}}\t{{.Status}}"
              echo ""
              echo "üìã Logs dos servi√ßos:"
              docker logs $(docker ps -q) --tail 10
              echo ""
              echo "‚ùå Deploy conclu√≠do com problemas!"
              echo "üìû Entre em contato com o administrador se os problemas persistirem."
            else
              echo ""
              echo "üéâ DEPLOY AUTOM√ÅTICO CONCLU√çDO COM SUCESSO - $(date)"
              echo "‚úÖ Todos os servi√ßos est√£o funcionando corretamente!"
            fi

            echo ""
            echo "üìç URLs de acesso:"
            echo "   Frontend: http://31.97.16.142:3000"
            echo "   RAG Server: http://31.97.16.142:8001"
            echo "   API Server: http://31.97.16.142:8002"
            echo ""
            echo "üìã Comandos √∫teis:"
            echo "   Verificar status: ./status.sh"
            echo "   Ver logs: tail -f logs/*.log"
            echo "   Reiniciar: ./stop_all.sh && ./start_all.sh"
