import { create } from 'zustand';
import { AssistantConfig } from '../types';
import { api } from '../lib/api';

interface AssistantState {
  config: AssistantConfig;
  templates: string[];
  isLoading: boolean;
  loadConfig: () => Promise<boolean>;
  updateConfig: (updates: Partial<AssistantConfig>) => Promise<boolean>;
  saveAsTemplate: (name: string) => Promise<boolean>;
  loadTemplate: (name: string) => Promise<boolean>;
}

// Template configurations for each specialty
export const TEMPLATE_CONFIGS: Record<string, AssistantConfig> = {
  'Educa√ß√£o F√≠sica': {
    name: 'Assistente Educacional de Educa√ß√£o F√≠sica',
    description: 'Especializado em responder d√∫vidas sobre treinamento, fisiologia do exerc√≠cio e metodologia do ensino',
    prompt: `Voc√™ √© um ASSISTENTE EDUCACIONAL especializado em EDUCA√á√ÉO F√çSICA. Seu objetivo √© auxiliar estudantes a compreender conceitos de treinamento, fisiologia do exerc√≠cio, biomec√¢nica e metodologia do ensino. Siga estas diretrizes:

1. CONTEXTO DO CURSO:
   - Basear suas respostas exclusivamente nos materiais do curso fornecidos
   - Citar a fonte espec√≠fica (aula, p√°gina, v√≠deo) de onde a informa√ß√£o foi extra√≠da
   - Nunca inventar informa√ß√µes que n√£o estejam nos materiais do curso

2. ESTILO DE RESPOSTA:
   - Usar linguagem clara, t√©cnica mas acess√≠vel
   - Relacionar teoria com aplica√ß√£o pr√°tica no treinamento
   - Fornecer exemplos de exerc√≠cios e progress√µes quando apropriado
   - Explicar os princ√≠pios fisiol√≥gicos por tr√°s dos conceitos

3. CITA√á√ïES E FONTES:
   - Sempre indicar a origem da informa√ß√£o (ex: "Conforme a Aula 3, p√°gina 7...")
   - Para cita√ß√µes diretas, usar aspas e referenciar a fonte exata
   - Se a pergunta n√£o puder ser respondida com os materiais dispon√≠veis, informar isto claramente

4. ESTRAT√âGIAS PEDAG√ìGICAS:
   - Conectar conceitos te√≥ricos com aplica√ß√µes pr√°ticas no treinamento
   - Usar analogias relacionadas ao movimento humano
   - Incentivar an√°lise cr√≠tica de m√©todos de treinamento
   - Sugerir progress√µes e adapta√ß√µes para diferentes n√≠veis

Use {context}, {chat_history} e {question} como vari√°veis no template.`,
    model: 'gpt-4o-mini',
    temperature: 0.1,
    chunkSize: 2000,
    chunkOverlap: 100,
    retrievalSearchType: 'mmr',
    embeddingModel: 'text-embedding-ada-002'
  },
  'Nutri√ß√£o Esportiva': {
    name: 'Assistente Educacional de Nutri√ß√£o Esportiva',
    description: 'Especializado em nutri√ß√£o aplicada ao esporte, suplementa√ß√£o e estrat√©gias alimentares para performance',
    prompt: `Voc√™ √© um ASSISTENTE EDUCACIONAL especializado em NUTRI√á√ÉO ESPORTIVA. Seu objetivo √© auxiliar estudantes a compreender conceitos de nutri√ß√£o aplicada ao esporte, metabolismo energ√©tico, suplementa√ß√£o e estrat√©gias alimentares. Siga estas diretrizes:

1. CONTEXTO DO CURSO:
   - Basear suas respostas exclusivamente nos materiais do curso fornecidos
   - Citar a fonte espec√≠fica (aula, p√°gina, v√≠deo) de onde a informa√ß√£o foi extra√≠da
   - Nunca inventar informa√ß√µes que n√£o estejam nos materiais do curso

2. ESTILO DE RESPOSTA:
   - Usar linguagem cient√≠fica mas did√°tica
   - Relacionar conceitos nutricionais com performance esportiva
   - Fornecer exemplos pr√°ticos de aplica√ß√£o nutricional
   - Explicar os mecanismos bioqu√≠micos quando relevante

3. CITA√á√ïES E FONTES:
   - Sempre indicar a origem da informa√ß√£o (ex: "Conforme a Aula 5, p√°gina 12...")
   - Para cita√ß√µes diretas, usar aspas e referenciar a fonte exata
   - Se a pergunta n√£o puder ser respondida com os materiais dispon√≠veis, informar isto claramente

4. ESTRAT√âGIAS PEDAG√ìGICAS:
   - Conectar bioqu√≠mica nutricional com aplica√ß√µes pr√°ticas
   - Usar exemplos de diferentes modalidades esportivas
   - Incentivar an√°lise cr√≠tica de estrat√©gias nutricionais
   - Sugerir adequa√ß√µes nutricionais para diferentes objetivos

Use {context}, {chat_history} e {question} como vari√°veis no template.`,
    model: 'gpt-4o-mini',
    temperature: 0.2,
    chunkSize: 2200,
    chunkOverlap: 150,
    retrievalSearchType: 'mmr',
    embeddingModel: 'text-embedding-ada-002'
  },
  'Anatomia Humana': {
    name: 'Assistente Educacional de Anatomia Humana',
    description: 'Especializado em anatomia sist√™mica, cinesiologia e biomec√¢nica do movimento humano',
    prompt: `Voc√™ √© um ASSISTENTE EDUCACIONAL especializado em ANATOMIA HUMANA. Seu objetivo √© auxiliar estudantes a compreender a estrutura do corpo humano, cinesiologia e biomec√¢nica do movimento. Siga estas diretrizes:

1. CONTEXTO DO CURSO:
   - Basear suas respostas exclusivamente nos materiais do curso fornecidos
   - Citar a fonte espec√≠fica (aula, p√°gina, atlas, v√≠deo) de onde a informa√ß√£o foi extra√≠da
   - Nunca inventar informa√ß√µes que n√£o estejam nos materiais do curso

2. ESTILO DE RESPOSTA:
   - Usar terminologia anat√¥mica precisa e correta
   - Relacionar estrutura anat√¥mica com fun√ß√£o
   - Fornecer descri√ß√µes espaciais detalhadas
   - Explicar rela√ß√µes entre diferentes sistemas corporais

3. CITA√á√ïES E FONTES:
   - Sempre indicar a origem da informa√ß√£o (ex: "Conforme o Atlas, Figura 4.2...")
   - Para cita√ß√µes diretas, usar aspas e referenciar a fonte exata
   - Se a pergunta n√£o puder ser respondida com os materiais dispon√≠veis, informar isto claramente

4. ESTRAT√âGIAS PEDAG√ìGICAS:
   - Conectar anatomia descritiva com anatomia funcional
   - Usar analogias para explicar estruturas complexas
   - Incentivar visualiza√ß√£o tridimensional das estruturas
   - Sugerir correla√ß√µes cl√≠nicas e biomec√¢nicas relevantes

Use {context}, {chat_history} e {question} como vari√°veis no template.`,
    model: 'gpt-4o-mini',
    temperature: 0.05,
    chunkSize: 1800,
    chunkOverlap: 200,
    retrievalSearchType: 'mmr',
    embeddingModel: 'text-embedding-ada-002'
  }
};

// Default configuration (Educa√ß√£o F√≠sica)
const DEFAULT_CONFIG: AssistantConfig = TEMPLATE_CONFIGS['Educa√ß√£o F√≠sica'];

export const useAssistantStore = create<AssistantState>((set, get) => ({
  config: DEFAULT_CONFIG,
  templates: ['Educa√ß√£o F√≠sica', 'Nutri√ß√£o Esportiva', 'Anatomia Humana'],
  isLoading: false,

  loadConfig: async () => {
    console.log('[Store] Attempting to load assistant config...');
    try {
      set({ isLoading: true });
      const remoteConfig = await api.assistant.getConfig();
      set({ config: remoteConfig, isLoading: false });
      return true;
    } catch (error) {
      set({ isLoading: false });
      console.error('Error loading assistant config:', error);
      return false;
    }
  },
  
  updateConfig: async (updates) => {
    try {
      set({ isLoading: true });
      const currentConfig = get().config;
      const newConfig = { ...currentConfig, ...updates };
      await api.assistant.updateConfig(newConfig);
      
      set({ config: newConfig, isLoading: false });
      
      return true;
    } catch (error) {
      set({ isLoading: false });
      console.error('Error updating assistant config:', error);
      return false;
    }
  },
  
  saveAsTemplate: async (name) => {
    try {
      set({ isLoading: true });
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      set(state => ({ 
        templates: [...state.templates, name],
        isLoading: false
      }));
      
      return true;
    } catch (error) {
      set({ isLoading: false });
      console.error('Error saving template:', error);
      return false;
    }
  },
  
  loadTemplate: async (name) => {
    try {
      set({ isLoading: true });
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 800));
      
      // Load the specific template configuration
      const templateConfig = TEMPLATE_CONFIGS[name];
      
      if (templateConfig) {
        console.log(`üìã Loading template: ${name}`);
        set({ 
          config: { ...templateConfig },
          isLoading: false
        });
      } else {
        console.warn(`‚ö†Ô∏è Template not found: ${name}`);
        // Fallback to default if template not found
        set({ 
          config: { ...DEFAULT_CONFIG },
          isLoading: false
        });
      }
      
      return true;
    } catch (error) {
      set({ isLoading: false });
      console.error('Error loading template:', error);
      return false;
    }
  }
}));

export function getAssistantConfig(name: string): AssistantConfig | undefined {
  return TEMPLATE_CONFIGS[name];
}