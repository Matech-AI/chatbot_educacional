#!/usr/bin/env python3
"""
Servidor RAG Independente - DNA da For√ßa AI
Este servidor fica sempre rodando para processamento de materiais e treinamento do modelo.
"""

import os
import logging
import asyncio
from pathlib import Path
from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse
from contextlib import asynccontextmanager
from pydantic import BaseModel
from typing import List, Optional, Dict, Any
import uvicorn
from dotenv import load_dotenv
from uuid import uuid4
import time
import json

# Importar componentes RAG
from rag_system.rag_handler import RAGHandler, RAGConfig, Source
import chromadb
from chromadb.config import Settings
from chat_agents.educational_agent import router as educational_agent_router
# ========================================
# MODELS PYDANTIC
# ========================================


class Question(BaseModel):
    content: str


class Response(BaseModel):
    answer: str
    sources: List[dict]
    response_time: float


class ChatRequest(BaseModel):
    message: str
    thread_id: Optional[str] = None


class ProcessMaterialsRequest(BaseModel):
    force_reprocess: bool = False
    enable_educational_features: bool = True


class ProcessResponse(BaseModel):
    success: bool
    message: str


class QueryRequest(BaseModel):
    question: str
    user_level: str = "intermediate"


class QueryResponse(BaseModel):
    answer: str
    sources: List[dict]
    response_time: float


class AssistantConfigRequest(BaseModel):
    prompt: Optional[str] = None
    chunk_size: Optional[int] = None
    chunk_overlap: Optional[int] = None
    temperature: Optional[float] = None
    title: Optional[str] = None


# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Carregar vari√°veis de ambiente
load_dotenv()

# Vari√°veis globais
rag_handler = None
chroma_persist_dir = None
materials_dir = None

# Sistema de persist√™ncia para configura√ß√µes do assistente
assistant_configs_file = Path("data/assistant_configs.json")
assistant_configs = {}
current_assistant_config = None


def load_assistant_configs():
    """Carregar configura√ß√µes do assistente do arquivo"""
    global assistant_configs, current_assistant_config

    if assistant_configs_file.exists():
        try:
            with open(assistant_configs_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                assistant_configs = data.get('configs', {})
                current_assistant_config = data.get('current', None)
                logger.info(
                    f"‚úÖ Configura√ß√µes do assistente carregadas: {len(assistant_configs)} templates")
        except Exception as e:
            logger.error(f"‚ùå Erro ao carregar configura√ß√µes: {e}")
            assistant_configs = {}
            current_assistant_config = None


def save_assistant_configs():
    """Salvar configura√ß√µes do assistente no arquivo"""
    global assistant_configs, current_assistant_config

    try:
        # Criar diret√≥rio se n√£o existir
        assistant_configs_file.parent.mkdir(parents=True, exist_ok=True)

        data = {
            'configs': assistant_configs,
            'current': current_assistant_config,
            'last_updated': time.time()
        }

        with open(assistant_configs_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)

        logger.info(
            f"‚úÖ Configura√ß√µes do assistente salvas: {len(assistant_configs)} templates")
    except Exception as e:
        logger.error(f"‚ùå Erro ao salvar configura√ß√µes: {e}")


def get_default_templates():
    """Retornar templates padr√£o"""
    return {
        "Educa√ß√£o F√≠sica": {
            "name": "Assistente Educacional de Educa√ß√£o F√≠sica",
            "description": "Especializado em responder d√∫vidas sobre treinamento, fisiologia do exerc√≠cio e metodologia do ensino",
            "prompt": """Voc√™ √© um ASSISTENTE EDUCACIONAL especializado em EDUCA√á√ÉO F√çSICA. Seu objetivo √© auxiliar estudantes a compreender conceitos de treinamento, fisiologia do exerc√≠cio, biomec√¢nica e metodologia do ensino. Siga estas diretrizes:

1. CONTEXTO DO CURSO:
   - Basear suas respostas exclusivamente nos materiais do curso fornecidos
   - Citar a fonte espec√≠fica (aula, p√°gina, v√≠deo) de onde a informa√ß√£o foi extra√≠da
   - Nunca inventar informa√ß√µes que n√£o estejam nos materiais do curso

2. ESTILO DE RESPOSTA:
   - Usar linguagem clara, t√©cnica mas acess√≠vel
   - Relacionar teoria com aplica√ß√£o pr√°tica no treinamento
   - Fornecer exemplos de exerc√≠cios e progress√µes quando apropriado
   - Explicar os princ√≠pios fisiol√≥gicos por tr√°s dos conceitos

3. CITA√á√ïES E FONTES:
   - Sempre indicar a origem da informa√ß√£o (ex: "Conforme a Aula 3, p√°gina 7...")
   - Para cita√ß√µes diretas, usar aspas e referenciar a fonte exata
   - Se a pergunta n√£o puder ser respondida com os materiais dispon√≠veis, informar isto claramente

4. ESTRAT√âGIAS PEDAG√ìGICAS:
   - Conectar conceitos te√≥ricos com aplica√ß√µes pr√°ticas no treinamento
   - Usar analogias relacionadas ao movimento humano
   - Incentivar an√°lise cr√≠tica de m√©todos de treinamento
   - Sugerir progress√µes e adapta√ß√µes para diferentes n√≠veis

Use {context}, {chat_history} e {question} como vari√°veis no template.""",
            "model": "gpt-4o-mini",
            "temperature": 0.1,
            "chunkSize": 2000,
            "chunkOverlap": 100,
            "retrievalSearchType": "mmr",
            "embeddingModel": "text-embedding-ada-002"
        },
        "Nutri√ß√£o Esportiva": {
            "name": "Assistente Educacional de Nutri√ß√£o Esportiva",
            "description": "Especializado em nutri√ß√£o aplicada ao esporte, suplementa√ß√£o e estrat√©gias alimentares para performance",
            "prompt": """Voc√™ √© um ASSISTENTE EDUCACIONAL especializado em NUTRI√á√ÉO ESPORTIVA. Seu objetivo √© auxiliar estudantes a compreender conceitos de nutri√ß√£o aplicada ao esporte, metabolismo energ√©tico, suplementa√ß√£o e estrat√©gias alimentares. Siga estas diretrizes:

1. CONTEXTO DO CURSO:
   - Basear suas respostas exclusivamente nos materiais do curso fornecidos
   - Citar a fonte espec√≠fica (aula, p√°gina, v√≠deo) de onde a informa√ß√£o foi extra√≠da
   - Nunca inventar informa√ß√µes que n√£o estejam nos materiais do curso

2. ESTILO DE RESPOSTA:
   - Usar linguagem cient√≠fica mas did√°tica
   - Relacionar conceitos nutricionais com performance esportiva
   - Fornecer exemplos pr√°ticos de aplica√ß√£o nutricional
   - Explicar os mecanismos bioqu√≠micos quando relevante

3. CITA√á√ïES E FONTES:
   - Sempre indicar a origem da informa√ß√£o (ex: "Conforme a Aula 5, p√°gina 12...")
   - Para cita√ß√µes diretas, usar aspas e referenciar a fonte exata
   - Se a pergunta n√£o puder ser respondida com os materiais dispon√≠veis, informar isto claramente

4. ESTRAT√âGIAS PEDAG√ìGICAS:
   - Conectar bioqu√≠mica nutricional com aplica√ß√µes pr√°ticas
   - Usar exemplos de diferentes modalidades esportivas
   - Incentivar an√°lise cr√≠tica de estrat√©gias nutricionais
   - Sugerir adequa√ß√µes nutricionais para diferentes objetivos

Use {context}, {chat_history} e {question} como vari√°veis no template.""",
            "model": "gpt-4o-mini",
            "temperature": 0.2,
            "chunkSize": 2200,
            "chunkOverlap": 150,
            "retrievalSearchType": "mmr",
            "embeddingModel": "text-embedding-ada-002"
        },
        "Anatomia Humana": {
            "name": "Assistente Educacional de Anatomia Humana",
            "description": "Especializado em anatomia sist√™mica, cinesiologia e biomec√¢nica do movimento humano",
            "prompt": """Voc√™ √© um ASSISTENTE EDUCACIONAL especializado em ANATOMIA HUMANA. Seu objetivo √© auxiliar estudantes a compreender a estrutura do corpo humano, cinesiologia e biomec√¢nica do movimento. Siga estas diretrizes:

1. CONTEXTO DO CURSO:
   - Basear suas respostas exclusivamente nos materiais do curso fornecidos
   - Citar a fonte espec√≠fica (aula, p√°gina, atlas, v√≠deo) de onde a informa√ß√£o foi extra√≠da
   - Nunca inventar informa√ß√µes que n√£o estejam nos materiais do curso

2. ESTILO DE RESPOSTA:
   - Usar terminologia anat√¥mica precisa e correta
   - Relacionar estrutura anat√¥mica com fun√ß√£o
   - Fornecer exemplos de movimentos e posi√ß√µes
   - Explicar a biomec√¢nica quando relevante

3. CITA√á√ïES E FONTES:
   - Sempre indicar a origem da informa√ß√£o (ex: "Conforme o Atlas de Anatomia, p√°gina 45...")
   - Para cita√ß√µes diretas, usar aspas e referenciar a fonte exata
   - Se a pergunta n√£o puder ser respondida com os materiais dispon√≠veis, informar isto claramente

4. ESTRAT√âGIAS PEDAG√ìGICAS:
   - Conectar anatomia com movimento e fun√ß√£o
   - Usar exemplos pr√°ticos de palpa√ß√£o e identifica√ß√£o
   - Incentivar an√°lise cr√≠tica de estruturas anat√¥micas
   - Sugerir exerc√≠cios de memoriza√ß√£o e identifica√ß√£o

Use {context}, {chat_history} e {question} como vari√°veis no template.""",
            "model": "gpt-4o-mini",
            "temperature": 0.1,
            "chunkSize": 2000,
            "chunkOverlap": 100,
            "retrievalSearchType": "mmr",
            "embeddingModel": "text-embedding-ada-002"
        }
    }


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifespan manager para inicializar e limpar recursos"""
    global rag_handler, chroma_persist_dir, materials_dir

    logger.info("üöÄ Iniciando servidor RAG...")

    # Configurar diret√≥rios
    chroma_persist_dir = Path("data/chromadb")
    materials_dir = Path("data/materials")

    # Criar diret√≥rios se n√£o existirem
    chroma_persist_dir.mkdir(parents=True, exist_ok=True)
    materials_dir.mkdir(parents=True, exist_ok=True)

    # Carregar configura√ß√µes do assistente
    load_assistant_configs()

    logger.info(f"üìÅ Diret√≥rios configurados:")
    logger.info(f"   - ChromaDB: {chroma_persist_dir}")
    logger.info(f"   - Materiais: {materials_dir}")

    # Tentar inicializar RAG handler automaticamente se OPENAI_API_KEY estiver dispon√≠vel
    openai_api_key = os.getenv("OPENAI_API_KEY")
    if openai_api_key and openai_api_key != "your_openai_api_key_here":
        try:
            logger.info("üîß Inicializando RAG handler automaticamente...")
            rag_handler = RAGHandler(
                api_key=openai_api_key,
                persist_dir=str(chroma_persist_dir)
            )
            logger.info("‚úÖ RAG handler inicializado automaticamente")
        except Exception as e:
            logger.warning(
                f"‚ö†Ô∏è  N√£o foi poss√≠vel inicializar RAG handler automaticamente: {e}")
            logger.info(
                "üí° Use a rota /initialize para inicializar manualmente")
    else:
        logger.info(
            "üí° OPENAI_API_KEY n√£o configurada. Use a rota /initialize para inicializar o RAG handler")

    logger.info("‚úÖ Servidor RAG iniciado com sucesso")

    yield

    logger.info("üõë Encerrando servidor RAG...")
    # Salvar configura√ß√µes do assistente ao encerrar
    save_assistant_configs()

# Inicializar FastAPI
app = FastAPI(
    title="DNA da For√ßa RAG Server",
    description="Servidor RAG para processamento de materiais e treinamento de modelos",
    version="1.7.0",
    lifespan=lifespan
)

# Configurar CORS para permitir o frontend no Vercel
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "https://chatbot-educacional.vercel.app",
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "https://dna-forca-frontend.vercel.app"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(educational_agent_router, prefix="/chat")

@app.get("/health")
async def health_check():
    """Verificar sa√∫de do servidor RAG"""
    return {
        "status": "healthy",
        "service": "rag-server",
        "version": "1.7.0",
        "rag_initialized": rag_handler is not None
    }


@app.get("/status")
async def get_status():
    """Obter status detalhado do servidor RAG"""
    global rag_handler

    status = {
        "service": "rag-server",
        "version": "1.7.0",
        "rag_initialized": rag_handler is not None,
        "materials_directory": str(materials_dir) if materials_dir else None,
        "chroma_persist_dir": str(chroma_persist_dir) if chroma_persist_dir else None,
        "materials_count": 0,
        "vector_store_ready": False
    }

    if rag_handler:
        try:
            stats = rag_handler.get_system_stats()
            status.update(stats)
        except Exception as e:
            logger.error(f"Erro ao obter estat√≠sticas: {e}")

    return status


@app.post("/process-materials", response_model=ProcessResponse)
async def process_materials(request: ProcessMaterialsRequest, background_tasks: BackgroundTasks):
    """Process materials in the background with configurable educational features."""
    global rag_handler
    if not rag_handler:
        raise HTTPException(status_code=503, detail="RAG handler not initialized.")

    try:
        logger.info(f"üîÑ Starting material processing with educational features: {request.enable_educational_features}")
        
        # Update the handler's config for this task
        rag_handler.config.enable_educational_features = request.enable_educational_features
        
        background_tasks.add_task(rag_handler.process_documents, force_reprocess=request.force_reprocess)

        return ProcessResponse(
            success=True,
            message="Material processing started in the background."
        )
    except Exception as e:
        logger.error(f"‚ùå Error starting processing: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/reprocess-enhanced-materials", response_model=ProcessResponse)
async def reprocess_enhanced_materials(background_tasks: BackgroundTasks):
    """
    Reprocess all materials using the enhanced RAG system.

    This endpoint forces reprocessing of all documents with educational features enabled,
    such as extracting key concepts, assessing difficulty, and creating summaries.
    """
    global rag_handler
    if not rag_handler:
        raise HTTPException(status_code=503, detail="RAG handler not initialized.")

    try:
        logger.info("üöÄ Starting enhanced material reprocessing...")

        # For√ßar a ativa√ß√£o de recursos educacionais para este processo
        rag_handler.config.enable_educational_features = True

        # Adicionar a tarefa de reprocessamento em segundo plano
        background_tasks.add_task(rag_handler.process_documents, force_reprocess=True)

        return ProcessResponse(
            success=True,
            message="Enhanced material reprocessing started in the background."
        )
    except Exception as e:
        logger.error(f"‚ùå Error starting enhanced reprocessing: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/query", response_model=QueryResponse)
async def query_rag(request: QueryRequest):
    """Realizar consulta RAG"""
    global rag_handler

    if not rag_handler:
        raise HTTPException(
            status_code=503, detail="RAG handler n√£o inicializado")

    try:
        start_time = asyncio.get_event_loop().time()

        # Realizar consulta
        result = rag_handler.generate_response(
            question=request.question,
            user_level=request.user_level
        )

        end_time = asyncio.get_event_loop().time()
        response_time = end_time - start_time

        return QueryResponse(
            answer=result.get("answer", ""),
            sources=result.get("sources", []),
            response_time=response_time
        )

    except Exception as e:
        logger.error(f"‚ùå Erro na consulta RAG: {e}")
        raise HTTPException(
            status_code=500, detail=f"Erro na consulta: {str(e)}")


@app.post("/initialize")
async def initialize_rag(api_key: str):
    """Inicializar RAG handler"""
    global rag_handler

    try:
        logger.info("üîß Inicializando RAG handler...")

        rag_handler = RAGHandler(
            api_key=api_key,
            persist_dir=str(chroma_persist_dir)
        )

        logger.info("‚úÖ RAG handler inicializado com sucesso")
        return {"success": True, "message": "RAG handler inicializado"}

    except Exception as e:
        logger.error(f"‚ùå Erro ao inicializar RAG: {e}")
        raise HTTPException(
            status_code=500, detail=f"Erro na inicializa√ß√£o: {str(e)}")


@app.post("/reset")
async def reset_rag():
    """Resetar RAG handler"""
    global rag_handler

    try:
        if rag_handler:
            rag_handler.reset()
            logger.info("üîÑ RAG handler resetado")

        return {"success": True, "message": "RAG handler resetado"}

    except Exception as e:
        logger.error(f"‚ùå Erro ao resetar RAG: {e}")
        raise HTTPException(status_code=500, detail=f"Erro no reset: {str(e)}")


@app.get("/stats")
async def get_rag_stats():
    """Obter estat√≠sticas do RAG"""
    global rag_handler

    if not rag_handler:
        raise HTTPException(
            status_code=503, detail="RAG handler n√£o inicializado")

    try:
        stats = rag_handler.get_system_stats()
        return stats

    except Exception as e:
        logger.error(f"‚ùå Erro ao obter estat√≠sticas: {e}")
        raise HTTPException(
            status_code=500, detail=f"Erro ao obter estat√≠sticas: {str(e)}")


# ========================================
# CHAT ENDPOINTS
# ========================================

@app.post("/chat", response_model=Response)
async def chat(question: Question):
    """Simplified chat endpoint"""
    logger.info(f"üí¨ Chat request: {question.content[:50]}...")

    if not rag_handler:
        simulated_answer = f"Sistema n√£o inicializado. Esta √© uma resposta simulada para: '{question.content}'. Configure uma chave OpenAI v√°lida para funcionalidades completas."
        return Response(
            answer=simulated_answer,
            sources=[{"title": "Sistema de Teste",
                      "source": "rag_server.py", "page": 1, "relevance": 0.9}],
            response_time=0.1
        )

    try:
        response = rag_handler.generate_response(question.content)
        return response
    except Exception as e:
        logger.error(f"‚ùå Chat error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/chat/explore-topic")
async def explore_topic(request: dict):
    """Explore a topic with the educational agent"""
    try:
        topic = request.get("topic")
        user_level = request.get("user_level", "intermediate")
        if not topic:
            raise HTTPException(status_code=400, detail="Topic is required")

        from chat_agents.educational_agent import get_educational_agent
        agent = get_educational_agent()

        if not agent.rag_handler:
            raise HTTPException(
                status_code=503, detail="RAG handler not initialized in Educational Agent.")

        # This would ideally be a more sophisticated method in the agent
        # For now, we can simulate a response or use a simple RAG query
        response = agent.rag_handler.generate_response(
            question=f"Explique o t√≥pico '{topic}' para um aluno de n√≠vel {user_level}.",
            user_level=user_level
        )
        return response

    except Exception as e:
        logger.error(f"‚ùå Error exploring topic: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/chat/learning-path/{topic}")
async def get_learning_path(topic: str, user_level: str = "intermediate"):
    """Get a learning path for a topic"""
    try:
        from chat_agents.educational_agent import get_educational_agent
        agent = get_educational_agent()

        # This would ideally be a more sophisticated method in the agent
        # For now, we can simulate a response or use a simple RAG query
        learning_path = [
            {"step": 1, "title": f"Fundamentos de {topic}",
                "description": "Conceitos b√°sicos e terminologia"},
            {"step": 2, "title": f"Aplica√ß√£o pr√°tica de {topic}",
                "description": "Como aplicar na pr√°tica"},
            {"step": 3, "title": f"Progress√£o em {topic}",
                "description": "N√≠veis avan√ßados e varia√ß√µes"},
            {"step": 4, "title": f"Troubleshooting {topic}",
                "description": "Solucionando problemas comuns"}
        ]

        return {
            "topic": topic,
            "user_level": user_level,
            "learning_path": learning_path,
            "estimated_time": "2-4 semanas",
            "prerequisites": [],
            "resources_available": True
        }

    except Exception as e:
        logger.error(f"‚ùå Error getting learning path: {e}")
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="DNA da For√ßa RAG Server")
    parser.add_argument("--host", default="0.0.0.0",
                        help="Host para o servidor")
    parser.add_argument("--port", type=int, default=8001,
                        help="Porta para o servidor")
    parser.add_argument("--reload", action="store_true",
                        help="Habilitar reload autom√°tico")

    args = parser.parse_args()

    logger.info(f"üöÄ Iniciando servidor RAG em {args.host}:{args.port}...")
    uvicorn.run(
        "rag_server:app",
        host=args.host,
        port=args.port,
        reload=args.reload,
        log_level="info"
    )
